name: 'ALB Controller Setup'

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  terraform:
    name: 'CreateInfrastructure'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./alb-controller

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Install and configure kubectl
      run: |
        curl https://storage.googleapis.com/kubernetes-release/release/v1.22.0/bin/linux/amd64/kubectl \
          --progress-bar \
          --location \
          --remote-name \
          --output kubectl
        chmod +x kubectl
        export PATH=$PATH:$(pwd)
        kubectl version --short --client
  assume_bootstrap:
    name: 'AssumeBootstrapRole'
    runs-on: ubuntu-latest
    needs: terraform
    environment: production  
    defaults:
      run:
        shell: bash
    steps:
    - name: AssumeBootstrap
      uses: aws-actions/configure-aws-credentials@v2
      with:
          role-to-assume: arn:aws:iam::458459211465:role/Bootstrap_role
          aws-region: us-east-1
          role-session-name: ${{env.GITHUB_SHA}}
          role-skip-session-tagging: true
          role-duration-seconds: 1200
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    - name: Debug
      run: |
        aws sts get-caller-identity
  debug:
    name: 'Debug'
    runs-on: ubuntu-latest
    needs: assume_bootstrap
    environment: production  
    defaults:
      run:
        shell: bash
    steps:
    - name: Debug
      run: |
        aws sts get-caller-identity
    # - name: Update Kubeconfig
    #   run: |
    #     aws eks update-kubeconfig --region us-east-1 --name EN-cluster
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY }}
    #     AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    # # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    # - name: Terraform Init
    #   run: |
    #     terraform init 
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY }}
    #     AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    # # Generates an execution plan for Terraform
    # - name: Terraform Plan
    #   run: terraform plan -input=false
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY }}
    #     AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #   # On push to "main", build or change infrastructure according to Terraform configuration files
    #   # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terraform Apply
    #   run: terraform apply -auto-approve -input=false
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY }}
    #     AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
